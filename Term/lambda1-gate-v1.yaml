AWSTemplateFormatVersion: "2010-09-09"

Resources:
  LambdaFunction1:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: lambda1
      Runtime: nodejs14.x
      Handler: lambda1.handler
      Code:
        S3Bucket: cloud-term-bucket
        S3Key: lambda1.zip
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"

  ApiGatewayRestApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: LambdaAPI
      EndpointConfiguration:
        Types: 
          - "REGIONAL"

  ApiGatewayResource1:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "lambda1"

  ApiGatewayMethod1:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource1
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction1.Arn}/invocations"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: "Empty"

  ApiGatewayPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt LambdaFunction1.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/*"

  LambdaFunctionTextract:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: textract
      Runtime: nodejs14.x
      Handler: textract.handler
      Code:
        S3Bucket: cloud-term-bucket
        S3Key: textract.zip
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"

  ApiGatewayResourceTextract:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "textract"

  ApiGatewayMethodTextract:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceTextract
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      Integration:
        Type: "AWS_PROXY"
        IntegrationHttpMethod: "POST"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionTextract.Arn}/invocations"
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: "Empty"

  ApiGatewayPermissionTextract:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt LambdaFunctionTextract.Arn
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/*"

  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - ApiGatewayMethod1
      - ApiGatewayMethodTextract
    Properties:
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: "prod"
      DeploymentId: !Ref ApiGatewayDeployment

  

Outputs:
  ApiGatewayEndpoint:
    Description: "Endpoint URL of the API Gateway"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com"
